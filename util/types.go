package util

const (
	// WidgetTypeCheckbox represents widget of type checkbox
	WidgetTypeCheckbox = "checkbox"

	// WidgetTypeDate represents widget of type date
	WidgetTypeDate = "date"

	// WidgetTypeFile represents widget of type file
	WidgetTypeFile = "file"

	// WidgetTypeImage represents widget of type image
	WidgetTypeImage = "imagefield"

	// WidgetTypeNumber represents widget of type number
	WidgetTypeNumber = "number"

	// WidgetTypePassword represents widget of type password
	WidgetTypePassword = "password"

	// WidgetTypeSelect represents widget of type select
	WidgetTypeSelect = "select"

	// WidgetTypeSelectRel represents widget of type select-rel
	WidgetTypeSelectRel = "select-rel"

	// WidgetTypeStatus represents a widget of type status
	WidgetTypeStatus = "status"

	// WidgetTypeTextArea represents widget of type textarea
	WidgetTypeTextArea = "textarea"

	// WidgetTypeTextField represents widget of type textfield
	WidgetTypeTextField = "textfield"

	// WidgetTypeTime represents widget of type time
	WidgetTypeTime = "time"

	// WidgetTypeToggle represents widget of type toggle
	WidgetTypeToggle = "toggle"

	// PrimaryKeySerial indicates primary key - autogenerated number
	PrimaryKeySerial = "serial"

	// PrimaryKeyUUID indicates primary key - autogenerated string
	PrimaryKeyUUID = "uuid"

	// PrimaryKeyInt indicates primary key - manually assigned number
	PrimaryKeyInt = "int"

	// PrimaryKeyString indicates primary key - manually assigned string
	PrimaryKeyString = "string"
)

// HTTPOpts represents options for http function generation
type HTTPOpts struct {
	// Generate indicates whether or not to generate http serve function
	Generate bool `json:"generate"`

	// Port represents default port to run application
	Port string `json:"port"`
}

// BootstrapOpts represents options for bootstrap function generation
type BootstrapOpts struct {
	// Generate indicates whether or not to generate bootstrap
	Generate bool `json:"generate"`

	// NoDB indicates that database connection should not be generated (default false)
	NoDB bool `json:"no_db"`

	// NoGRPCWeb indicates that grpcweb server should not be generated (default false)
	NoGRPCWeb bool `json:"no_grpc_web"`

	// NoGRPCWire indicates that grpc server should not be generated (default false)
	NoGRPCWire bool `json:"no_grpc_wire"`

	// NoVersion indicates that version code should not be generated (default false)
	NoVersion bool `json:"no_version"`

	// Settings represent list of settings to load during bootstrap into main package
	Settings []BootstrapSetting `json:"settings"`

	// Assets indicates that we want to have an assets folder (using rice)
	Assets bool `json:"assets"`

	// HTTPPort represents port to listen to by default
	HTTPPort string `json:"http_port"`

	// GRPCPort represents port to grpc listen to by default
	GRPCPort string `json:"grpc_port"`
}

// BootstrapSetting represents a setting required by the application and loaded during bootstrap
type BootstrapSetting struct {
	// Name represents name of setting
	Name string `json:"name"`

	// Description gives information on the setting (useful to display errors if not found)
	Description string `json:"description"`

	// Public indicates if setting should be accessible from all packages
	Public bool `json:"public"`
}

// SchemaOpts represents options for schema generation
type SchemaOpts struct {
	// Create whether or not to generate CREATE TABLE
	Create bool `json:"create"`

	// Drop whether or not to generate DROP IF EXISTS before CREATE
	Drop bool `json:"drop"`

	// Aggregate whether or not to generate schema into single file instead of separate files
	Aggregate bool `json:"aggregate"`

	// Path indicates in which path to generate the schema sql file
	Path string `json:"path"`
}

// CrudOpts indicateds if crud functions should be generated
type CrudOpts struct {

	// Enable indicates if crud should be generated
	Generate bool `json:"generate"`

	// Hooks describes hooks options for CRUD generation
	Hooks CrudHooks `json:"hooks"`
}

// CrudHooks represents which crud hooks should be generated
type CrudHooks struct {

	// PreSave allows hook function to be executed before Save operation is performed
	PreSave bool `json:"pre_save"`

	// PostSave allows hook function to be executed after Save operation is performed
	PostSave bool `json:"post_save"`

	// PreRead allows hook function to be executed before Read operation is performed
	PreRead bool `json:"pre_read"`

	// PostRead allows hook function to be executed after Read operation is performed
	PostRead bool `json:"post_read"`

	// PreList allows hook function to be executed before List operation is performed
	PreList bool `json:"pre_list"`

	// PostList allows hook function to be executed after List operation is performed
	PostList bool `json:"post_list"`

	// PreDeleteSingle allows hook function to be executed before DeleteSingle operation is performed
	PreDeleteSingle bool `json:"pre_delete_single"`

	// PostDeleteSingle allows hook function to be executed after DeleteSingle operation is performed
	PostDeleteSingle bool `json:"post_delete_single"`

	// PreDeleteMany allows hook function to be executed before DeleteMany operation is performed
	PreDeleteMany bool `json:"pre_delete_many"`

	// PostDeleteMany allows hook function to be executed after DeleteMany operation is performed
	PostDeleteMany bool `json:"post_delete_many"`
}

// AdminOpts represents which Admin functions should be generated
type AdminOpts struct {
	// Generate indicates whether or not to generate the Admin service
	Generate bool `json:"generate"`

	// Create indicates if code Add component of Admin service, method Create, should be automatically generated
	Create bool `json:"create"`

	// Read indicates if code Read component of Admin service, method Read, should be automatically generated
	Read bool `json:"read"`

	// List indicates if code Browse component of Admin service, method List, should be automatically generated
	List bool `json:"list"`

	// Update indicates if code Edit component of Admin service, method Update, should be automatically generated
	Update bool `json:"update"`

	// Delete indicates if code Delete component of Admin service, method Delete, should be automatically generated
	Delete bool `json:"delete"`

	// Hooks describes hooks options for Admin generation
	Hooks ResourceHooks `json:"hooks"`

	// Auth describes auth options for Auth code generation
	Auth AuthOpts `json:"auth"`
}

// AuthOpts represents options for auth code generation
type AuthOpts struct {
	// Generate indicates whether or not to generate the Auth code
	Generate bool `json:"generate"`
}

// ResourceHooks represents which rest hooks should be generated
type ResourceHooks struct {

	// PreCreate allows hook function to be executed before POST operations are done
	PreCreate bool `json:"pre_create"`

	// PostCreate allows hook function to be executed after POST operations are done
	PostCreate bool `json:"post_create"`

	// PreRead allows hook function to be executed before GET (single by id) operations are done
	PreRead bool `json:"pre_read"`

	// PostRead allows hook function to be executed after GET (single by id) operations are done
	PostRead bool `json:"post_read"`

	// PreList allows hook function to be executed before GET (many by filters) operations are done
	PreList bool `json:"pre_list"`

	// PostList allows hook function to be executed after GET (many by filters) operations are done
	PostList bool `json:"post_list"`

	// PreUpdate allows hook function to be executed before PUT operations are done
	PreUpdate bool `json:"pre_update"`

	// PostUpdate allows hook function to be executed after PUT operations are done
	PostUpdate bool `json:"post_update"`

	// PreDelete allows hook function to be executed before DELETE operations are done
	PreDelete bool `json:"pre_delete"`

	// PostDelete allows hook function to be executed after DELETE operations are done
	PostDelete bool `json:"post_delete"`
}

// VuetifyOpts represents options for vuetify generator
type VuetifyOpts struct {
	// Generate represents whether or not to generate vuetify assets
	Generate bool `json:"generate"`

	// App represents the app for which the gocipe module will be generated
	App string `json:"app"`
}

// VuetifyEntityOpts represents per entity options for the vuetify generator
type VuetifyEntityOpts struct {
	// NoGenerate represents whether or not to generate vuetify assets
	NoGenerate bool `json:"no_generate"`

	// NotInMenu indicates whether or not to show entity in menu
	NotInMenu bool `json:"not_in_menu"`

	// Icon
	Icon string `json:"icon"`
}

// EditWidgetOpts represents a UI widget for edit forms
type EditWidgetOpts struct {
	// Type indicates which widget type is represented
	Type string `json:"type"`

	// Options represents options listed by this widget
	Options []EditWidgetOption `json:"options"`

	// Multiple indicates that the field accepts multiple values
	Multiple bool `json:"multiple"`

	// Hide indicates whether or not to show field in the edit form
	Hide bool `json:"hide"`

	// Description is the description shown to the user on the edit form
	Description string `json:"description"`
}

// EditWidgetOption represents an option for SelectRel widget type
type EditWidgetOption struct {
	// Value represents the stored value of the option
	Value string `json:"value"`
	// Label represents the displayed of the option
	Text string `json:"text"`
}

// ListWidgetOpts represents a UI widget for listing tables
type ListWidgetOpts struct {
	// NoShowInList indicates whether or not to show field in listing
	Hide bool `json:"hide"`

	// Type indicates which widget type is represented
	Type string `json:"type"`
}

// ContentBuilderOpts represents the Lardwaz options for content building
type ContentBuilderOpts struct {
	// Generate indicates whether or not Lardwaz module should be generated
	Generate bool `json:"generate"`

	// AllowUpload indicates whether or not Lardwaz module should cater for upload
	AllowUpload string `json:"allow_upload"`

	// UploadTypes represents the file types catered by Lardwaz module upload feature
	UploadTypes []string `json:"upload_types"`
}
