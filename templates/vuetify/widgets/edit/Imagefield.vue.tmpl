<template>
  <div class="mt-4 mb-4">
    <div class="caption v-label v-label--active theme--light pb-2">{{ "{{ $attrs.label }}" }}</div>
    <div class="uploader-wrapper mt-1">
      <picture-input buttonClass ref="pictureInput" :crop="false" :z-index="0"
        class="image-uploader" :prefill="image" width="400" height="200" margin="16"
        accept="image/jpeg,image/png" size="10" button-class="btn"
        :custom-strings="{
                    upload: '<h3>Image</h3>', drag: 'Click here to upload image' }"
        @change="onChange">
      </picture-input>
      <div class="px-2">
        <v-checkbox
          label="Apply watermark"
          v-model="watermark"
          class="mb-0"
        ></v-checkbox>
      </div>
      <template v-if="uploadStatus.uploading">
        <v-progress-linear :indeterminate="uploadStatus.uploading"></v-progress-linear>
      </template>
      <v-alert :value="uploadStatus.success" type="success" dismissible class="pa-2" transition="scale-transition">
        Image upload successful
      </v-alert>
      <v-alert :value="uploadStatus.error" type="error" dismissible small transition="scale-transition">
      {{ "{{ uploadStatus.error | capitalize }}" }}
      </v-alert>
      <v-alert :value="true" color="gray lighten-3" dark icon="info" class="pa-2">
      {{ "{{ $attrs.hint }}" }}
      </v-alert>
    </div>
  </div>
</template>

<script>
import { AdminClient } from "@/services/service_admin_pb_service";
import { UploadRequest, UploadOpts } from "@/services/service_admin_pb";
import { File } from "@/services/service_admin_pb";
import PictureInput from "vue-picture-input";

function convertDataURIToBinary(dataURI) {
  var base64Index = dataURI.indexOf(";base64,") + 8;
  var base64 = dataURI.substring(base64Index);
  var raw = window.atob(base64);
  var rawLength = raw.length;
  var array = new Uint8Array(new ArrayBuffer(rawLength));

  for (var i = 0; i < rawLength; i++) {
    array[i] = raw.charCodeAt(i);
  }

  return array;
}

let cli = new AdminClient("/api");

export default {
  inheritAttrs: false,
  props: ["field", "rpc", "entityid"],
  data() {
    return {
      image: "",
      uploadStatus: {
        success: false,
        error: null,
        uploading: false
      },
      uploadOptions: null
    };
  },
  components: {
    PictureInput
  },
  created() {
    this.image = this.$attrs.value;

    this.uploadOptions = new UploadOpts();
    this.uploadOptions.setWatermark(true);
  },
  filters: {
    capitalize: function(value) {
      if (!value) return "";
      value = value.toString();
      return value.charAt(0).toUpperCase() + value.slice(1);
    }
  },
  computed: {
    watermark: {
      set(status) {
        this.uploadOptions.setWatermark(status);
      },
      get() {
        return this.uploadOptions.getWatermark();
      }
    }
  },
  methods: {
    onChange(image) {
      console.log("upload triggered");
      if (!image) {
        console.log("FileReader API not supported: use the <form>, Luke!");
        return;
      }

      // Resets alerts
      this.uploadStatus.error = null;
      this.uploadStatus.success = false;

      // Finds image name
      let req = new UploadRequest();
      req.setId(this.entityid);
      req.setField(this.field);
      req.setFilename(this.$refs.pictureInput.file.name);
      req.setContent(convertDataURIToBinary(image));
      req.setUploadoptions(this.uploadOptions);
      this.uploadStatus.uploading = true;

      cli[this.rpc](req, (err, resp) => {
        this.uploadStatus.uploading = false;
        if (err) {
          console.log(err);
          this.uploadStatus.error = err.message;
          return;
        }

        this.uploadStatus.success = true;

        this.image = resp.getUri();
      });
    }
  }
};
</script>

<style lang="scss" scoped>
.uploader-wrapper {
  background: #c9c9c9;
}
.image-container {
  height: 200px;
  width: 200px;
  img {
    display: block;
    height: 200px;
    width: auto;
  }
}
</style>
