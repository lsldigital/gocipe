package web

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"path"
	"strings"
	"time"

	"github.com/gorilla/mux"
	log "github.com/sirupsen/logrus"
	"{{.ImportPath}}/core"
	"{{.ImportPath}}/util"
)

func lookupContent(root http.FileSystem, upath string) (http.File, os.FileInfo, bool) {
	var (
		err  error
		file http.File
		info os.FileInfo
	)

	if !strings.HasPrefix(upath, "/") {
		upath = "/" + upath
	}

	upath = path.Clean(upath)

	if file, err = root.Open(upath); err != nil {
		return nil, nil, false
	}

	if info, err = file.Stat(); err != nil {
		return nil, nil, false
	}

	if info.IsDir() {
		upath += "/index.html"
		return lookupContent(root, upath+"/index.html")
	}

	return file, info, true
}

type fileHandlerWithFallback struct {
	root     http.FileSystem
	fallback http.File
}

// FileServerWithFallback returns an HTTP static fileserver with a default file fallback if requested url was not found
func FileServerWithFallback(root http.FileSystem, fallback http.File) http.Handler {
	return &fileHandlerWithFallback{root: root, fallback: fallback}
}

func (f *fileHandlerWithFallback) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	var (
		file http.File
		info os.FileInfo
		ok   bool
		err  error
	)

	file, info, ok = lookupContent(f.root, r.URL.Path)

	if !ok {
		file = f.fallback
		if info, err = file.Stat(); err == nil {
			ok = true
		}
	}

	if ok {
		http.ServeContent(w, r, info.Name(), info.ModTime(), file)
	} else {
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		w.Header().Set("X-Content-Type-Options", "nosniff")
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("File not found and default could not be served."))
	}
}

type fileHandlerWithFallbackContent struct {
	root        http.FileSystem
	fallback    io.ReadSeeker
	filename    string
	contentType string
	modtime     time.Time
}

// FileServerWithFallbackContent returns an HTTP static fileserver with a default content fallback if requested url was not found
func FileServerWithFallbackContent(root http.FileSystem, fallback io.ReadSeeker, filename, contentType string, modtime time.Time) http.Handler {
	return &fileHandlerWithFallbackContent{root: root, fallback: fallback, filename: filename, contentType: contentType, modtime: modtime}
}

func (f *fileHandlerWithFallbackContent) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", f.contentType)
	http.ServeContent(w, r, f.filename, f.modtime, f.fallback)
}

type fileHandlerWithNotFoundHandler struct {
	root    http.FileSystem
	handler http.Handler
}

// FileServerWithNotFoundHandler returns an HTTP static fileserver with a custom http.Handler if requested url was not found
func FileServerWithNotFoundHandler(root http.FileSystem, handler http.Handler) http.Handler {
	return &fileHandlerWithNotFoundHandler{root: root, handler: handler}
}

func (f *fileHandlerWithNotFoundHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if file, info, ok := lookupContent(f.root, r.URL.Path); ok {
		http.ServeContent(w, r, info.Name(), info.ModTime(), file)
	} else {
		f.handler.ServeHTTP(w, r)
	}
}

// VueAppRouting returns a new subrouter
func VueAppRouting(router *mux.Router, prefix string, appName string, fallbackParams interface{}, mwf ...mux.MiddlewareFunc) error {
	fileSystem := util.WebBox{Box: core.Assets, App: "web/" + appName, Path: "/" + appName}

	subRoute := router.PathPrefix(prefix).Subrouter()
	
	for _, m := range mwf {
		subRoute.Use(m)
	}

	if fallbackParams == nil {
		fallbackFile, err := core.Assets.Open("web/" + appName + "/index.html")
		if err != nil {
			return err
		}

		subRoute.PathPrefix("/").Handler(
			http.StripPrefix(
				prefix,
				FileServerWithFallback(fileSystem, fallbackFile),
			),
	)

		return nil
	}

	raw, err := core.Assets.String("web/" + appName + "/index.html")

	if err != nil {
		return err
	}

	tpl, err := template.New(appName).Parse(raw)
	if err != nil {
		return err
	}
	
	b := bytes.NewBuffer([]byte{})
	err = tpl.Execute(b, fallbackParams)

	if err != nil {
		return err
	}

	subRoute.PathPrefix("/").Handler(
		http.StripPrefix(
			prefix,
			FileServerWithNotFoundHandler(fileSystem, FileServerWithFallbackContent(fileSystem, bytes.NewReader(b.Bytes()), "index.html", "text/html", time.Now())),
		),
	)

	return nil
}

// DevRouting returns a new subrouter
func DevRouting(router *mux.Router, prefix string, app string, port string, mwf ...mux.MiddlewareFunc) error {
	var (
		url    = &url.URL{Scheme: "http", Host: "localhost:" + port}
		wsprox = NewWSReverseProxy(url)
		htprox = httputil.NewSingleHostReverseProxy(url)
	)

	subRoute := router.PathPrefix(prefix).Subrouter()

	for _, m := range mwf {
		subRoute.Use(m)
	}

	subRoute.PathPrefix("/").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if IsWebsocket(r) {
			wsprox.ServeHTTP(w, r)
		} else {
			htprox.ServeHTTP(w, r)
		}
	})

	return nil
}
